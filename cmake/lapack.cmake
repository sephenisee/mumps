# # Handle options for finding LAPACK
# 
# if(NOT DEFINED LAPACK_VENDOR AND DEFINED ENV{MKLROOT})
#   set(LAPACK_VENDOR MKL)
# endif()
# 
# if(find_static)
#   list(APPEND LAPACK_VENDOR STATIC)
# endif()
# 
# find_package(LAPACK REQUIRED COMPONENTS ${LAPACK_VENDOR})

include(ExternalProject)
include(GNUInstallDirs)

if(given_openblas)
    file(MAKE_DIRECTORY ${OpenBLAS_INCLUDE_DIRS})
    if(NOT IS_DIRECTORY ${OpenBLAS_INCLUDE_DIRS})
      message(FATAL_ERROR "Could not create directory: ${OpenBLAS_INCLUDE_DIRS}")
    endif()

    add_library(LAPACK::LAPACK INTERFACE IMPORTED GLOBAL)
    target_include_directories(LAPACK::LAPACK INTERFACE ${OpenBLAS_INCLUDE_DIRS})
    target_link_libraries(LAPACK::LAPACK INTERFACE ${OpenBLAS_LIBRARY})

    return()
endif()

set(lapack_cmake_args
-DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_INSTALL_PREFIX}
-DCMAKE_C_COMPILER:PATH=${CMAKE_C_COMPILER}
-DCMAKE_Fortran_COMPILER:PATH=${CMAKE_Fortran_COMPILER}
-DBUILD_TESTING:BOOL=off
-DCMAKE_BUILD_TYPE:STRING=Release
-DCMAKE_TLS_VERIFY:BOOL=${CMAKE_TLS_VERIFY}
)

file(READ ${CMAKE_CURRENT_LIST_DIR}/libraries.json json)

string(JSON lapack_url GET ${json} lapack git)
# string(JSON scalapack_tag GET ${json} scalapack tag)

set(LAPACK_INCLUDE_DIRS ${CMAKE_INSTALL_FULL_INCLUDEDIR})
file(MAKE_DIRECTORY ${LAPACK_INCLUDE_DIRS})
if(NOT IS_DIRECTORY ${LAPACK_INCLUDE_DIRS})
  message(FATAL_ERROR "Could not create directory: ${LAPACK_INCLUDE_DIRS}")
endif()

if(BUILD_SHARED_LIBS)
   set(LAPACK_LIBRARIES ${CMAKE_INSTALL_FULL_LIBDIR}/${CMAKE_SHARED_LIBRARY_PREFIX}liblapack${CMAKE_SHARED_LIBRARY_SUFFIX}
    ${CMAKE_INSTALL_FULL_LIBDIR}/${CMAKE_SHARED_LIBRARY_PREFIX}libblas${CMAKE_SHARED_LIBRARY_SUFFIX}
  )
else()
  set(LAPACK_LIBRARIES ${CMAKE_INSTALL_FULL_LIBDIR}/${CMAKE_STATIC_LIBRARY_PREFIX}liblapack${CMAKE_STATIC_LIBRARY_SUFFIX}
    ${CMAKE_INSTALL_FULL_LIBDIR}/${CMAKE_STATIC_LIBRARY_PREFIX}libblas${CMAKE_STATIC_LIBRARY_SUFFIX}
  )
endif()

ExternalProject_Add(lapack
GIT_REPOSITORY ${lapack_url}
# GIT_TAG ${scalapack_tag}
GIT_SHALLOW true
CMAKE_ARGS ${lapack_cmake_args}
TEST_COMMAND ""
BUILD_BYPRODUCTS ${LAPACK_LIBRARIES}
CONFIGURE_HANDLED_BY_BUILD true
USES_TERMINAL_DOWNLOAD true
USES_TERMINAL_UPDATE true
USES_TERMINAL_PATCH true
USES_TERMINAL_CONFIGURE true
USES_TERMINAL_BUILD true
USES_TERMINAL_INSTALL true
USES_TERMINAL_TEST true
)

add_library(LAPACK::LAPACK INTERFACE IMPORTED GLOBAL)

target_include_directories(LAPACK::LAPACK INTERFACE ${LAPACK_INCLUDE_DIRS})

target_link_libraries(LAPACK::LAPACK INTERFACE ${LAPACK_LIBRARIES})

add_dependencies(LAPACK::LAPACK lapack)